PYINSTALLER COMMANDS FOR BULK FOLDER RENAMER
=============================================

OPTION 1: Single Executable (Recommended)
------------------------------------------
pyinstaller --onefile --windowed --name "BulkFolderRenamer" --add-binary "ffmpeg.exe;." --hidden-import "PIL" --hidden-import "tkinter" bulk_folder_renamer.py

OPTION 2: Directory Distribution (Faster startup)
-------------------------------------------------
pyinstaller --windowed --name "BulkFolderRenamer" --add-binary "ffmpeg.exe;." --hidden-import "PIL" --hidden-import "tkinter" bulk_folder_renamer.py

OPTION 3: Console Version (For debugging)
-----------------------------------------
pyinstaller --onefile --console --name "BulkFolderRenamer_Debug" --add-binary "ffmpeg.exe;." --hidden-import "PIL" --hidden-import "tkinter" bulk_folder_renamer.py

OPTION 4: With Custom Icon (if you have an icon file)
-----------------------------------------------------
pyinstaller --onefile --windowed --name "BulkFolderRenamer" --icon="icon.ico" --add-binary "ffmpeg.exe;." --hidden-import "PIL" --hidden-import "tkinter" bulk_folder_renamer.py

OPTION 5: Advanced Build with Spec File
---------------------------------------
First generate spec file:
pyinstaller --name "BulkFolderRenamer" --onefile --windowed --add-binary "ffmpeg.exe;." bulk_folder_renamer.py

Then edit the generated .spec file and build with:
pyinstaller BulkFolderRenamer.spec

PARAMETERS EXPLAINED:
--------------------
--onefile          : Creates a single executable file
--windowed         : No console window (GUI only)
--console          : Show console window (for debugging)
--name "NAME"      : Name of the executable
--icon="file.ico"  : Custom icon for the executable
--add-binary "ffmpeg.exe;." : Include ffmpeg.exe in the build
--hidden-import    : Force include modules that might not be auto-detected
--distpath         : Output directory for the executable
--workpath         : Working directory during build

NOTES:
------
1. Make sure ffmpeg.exe is in the same directory as bulk_folder_renamer.py
2. The semicolon (;) in --add-binary separates source and destination
3. Use dot (.) as destination to place ffmpeg.exe in the root of the executable
4. PIL is optional - only needed if image processing features are used
5. For Windows, use semicolon (;) as separator
6. For Linux/Mac, use colon (:) as separator instead

BUILD PROCESS:
--------------
1. Install PyInstaller: pip install pyinstaller
2. Navigate to your project directory
3. Run one of the commands above
4. Find your executable in the 'dist' folder

TROUBLESHOOTING:
---------------
- If modules are missing, add them with --hidden-import
- If files are missing, add them with --add-data or --add-binary
- Use --console for debugging to see error messages
- Clean build with: rmdir /s build dist (Windows) or rm -rf build dist (Linux/Mac)

